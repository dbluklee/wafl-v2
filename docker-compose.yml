services:
  # API Gateway (Nginx)
  wafl-api-gateway:
    image: nginx:alpine
    container_name: wafl-api-gateway
    ports:
      - "50080:80"  # 외부: 50080, 내부: 80
    volumes:
      - ./api-gateway/nginx.conf:/etc/nginx/nginx.conf
      - ./media:/app/media  # 이미지 서빙을 위한 볼륨
    depends_on:
      - wafl-web-server
      - wafl-scraping-server
    networks:
      - wafl-network
    restart: unless-stopped

  # 공통 인프라 서비스
  wafl-postgresql:
    image: postgres:15-alpine
    container_name: wafl-postgresql
    environment:
      POSTGRES_DB: wafl_db
      POSTGRES_USER: wafl_user
      POSTGRES_PASSWORD: wafl_password
    ports:
      - "55432:5432"  # 외부: 55432, 내부: 5432
    volumes:
      - postgresql_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - wafl-network
    restart: unless-stopped

  wafl-redis:
    image: redis:7-alpine
    container_name: wafl-redis
    ports:
      - "56379:6379"  # 외부: 56379, 내부: 6379
    volumes:
      - redis_data:/data
    networks:
      - wafl-network
    restart: unless-stopped

  # 대화 전용 PostgreSQL (보안 격리)
  wafl-conversation-db:
    image: postgres:15-alpine
    container_name: wafl-conversation-db
    environment:
      POSTGRES_DB: conversation_db
      POSTGRES_USER: conv_secure_user
      POSTGRES_PASSWORD: ${CONVERSATION_DB_PASSWORD:-conv_secure_pass_2024!}
    ports:
      - "55433:5432"  # 외부: 55433, 내부: 5432
    volumes:
      - conversation_db_data:/var/lib/postgresql/data
      - ./conversation-db/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./conversation-db/backups:/backups  # 백업 디렉토리
    networks:
      - wafl-network
    restart: unless-stopped
    # 보안 강화: 메모리 제한 및 헬스체크
    mem_limit: 2g
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U conv_secure_user -d conversation_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 마이크로서비스들
  wafl-web-server:
    build:
      context: ./web-server
      dockerfile: Dockerfile
    container_name: wafl-web-server
    ports:
      - "58000:8000"  # 임시로 외부 접근 허용
    volumes:
      - ./media:/app/media
      - ./web-server:/app
    environment:
      - DATABASE_URL=postgresql://wafl_user:wafl_password@wafl-postgresql:5432/wafl_db
      - REDIS_URL=redis://wafl-redis:6379/0
      - SERVICE_NAME=web-server
      - SERVICE_PORT=8000
      - JUSO_API_KEY=${JUSO_API_KEY}
    depends_on:
      - wafl-postgresql
      - wafl-redis
    networks:
      - wafl-network
    restart: unless-stopped

  # Celery Worker (스크래핑 작업 수행)
  wafl-scraping-worker:
    build:
      context: ./scraping-server
      dockerfile: Dockerfile
    container_name: wafl-scraping-worker
    volumes:
      - ./media:/app/media
      - ./scraping-server:/app
    environment:
      - DATABASE_URL=postgresql://wafl_user:wafl_password@wafl-postgresql:5432/wafl_db
      - REDIS_URL=redis://wafl-redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      - wafl-postgresql
      - wafl-redis
    networks:
      - wafl-network
    restart: unless-stopped
    command: ["celery", "-A", "celery_app.celery", "worker", "--loglevel=info", "--concurrency=2", "--queues=celery,scraping,summary"]

  # 스크래핑 API 서버
  wafl-scraping-server:
    build:
      context: ./scraping-server
      dockerfile: Dockerfile
    container_name: wafl-scraping-server
    ports:
      - "58001:8001"  # 임시로 외부 접근 허용
    volumes:
      - ./media:/app/media
      - ./scraping-server:/app
    environment:
      - DATABASE_URL=postgresql://wafl_user:wafl_password@wafl-postgresql:5432/wafl_db
      - REDIS_URL=redis://wafl-redis:6379/0
      - SERVICE_NAME=scraping-server
      - SERVICE_PORT=8001
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      - wafl-postgresql
      - wafl-redis
      - wafl-scraping-worker
    networks:
      - wafl-network
    restart: unless-stopped
    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8001", "--reload"]

  # Milvus Standalone (벡터 DB)
  wafl-milvus-etcd:
    image: quay.io/coreos/etcd:v3.5.5
    container_name: wafl-milvus-etcd
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - milvus_etcd:/etcd
    networks:
      - wafl-network
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd

  wafl-milvus-minio:
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    container_name: wafl-milvus-minio
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    volumes:
      - milvus_minio:/minio_data
    networks:
      - wafl-network
    command: minio server /minio_data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  wafl-milvus:
    image: milvusdb/milvus:v2.3.3
    container_name: wafl-milvus
    depends_on:
      - wafl-milvus-etcd
      - wafl-milvus-minio
    environment:
      ETCD_ENDPOINTS: wafl-milvus-etcd:2379
      MINIO_ADDRESS: wafl-milvus-minio:9000
    volumes:
      - milvus_data:/var/lib/milvus
    ports:
      - "59530:19530"  # 외부: 59530, 내부: 19530
      - "59121:9091"   # 메트릭 포트
    networks:
      - wafl-network
    restart: unless-stopped
    command: ["milvus", "run", "standalone"]

  # RAG LLM 서버
  wafl-rag-server:
    build:
      context: ./rag-server
      dockerfile: Dockerfile
    container_name: wafl-rag-server
    ports:
      - "58002:8002"  # 외부: 58002, 내부: 8002
    volumes:
      - ./media:/app/media
      - ./rag-server:/app
    environment:
      - DATABASE_URL=postgresql://wafl_user:wafl_password@wafl-postgresql:5432/wafl_db
      - CONVERSATION_DB_URL=postgresql://conv_secure_user:${CONVERSATION_DB_PASSWORD:-conv_secure_pass_2024!}@wafl-conversation-db:5432/conversation_db
      - CONVERSATION_ENCRYPTION_KEY=${CONVERSATION_ENCRYPTION_KEY:-your-secure-32-byte-encryption-key-here}
      - REDIS_HOST=wafl-redis
      - REDIS_PORT=6379
      - REDIS_DB=1
      - MILVUS_HOST=wafl-milvus
      - MILVUS_PORT=19530
      - OLLAMA_MAIN_URL=http://112.148.37.41:1884
      - OLLAMA_AGENT_URL=http://112.148.37.41:1889
      - SERVICE_NAME=rag-server
      - SERVICE_PORT=8002
    depends_on:
      - wafl-postgresql
      - wafl-conversation-db
      - wafl-redis
      - wafl-milvus
    networks:
      - wafl-network
    restart: unless-stopped
    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8002", "--reload"]

  # RAG 대화 저장 워커 (비동기 로깅)
  wafl-rag-worker:
    build:
      context: ./rag-server
      dockerfile: Dockerfile
    container_name: wafl-rag-worker
    volumes:
      - ./rag-server:/app
    environment:
      - DATABASE_URL=postgresql://wafl_user:wafl_password@wafl-postgresql:5432/wafl_db
      - CONVERSATION_DB_URL=postgresql://conv_secure_user:${CONVERSATION_DB_PASSWORD:-conv_secure_pass_2024!}@wafl-conversation-db:5432/conversation_db
      - CONVERSATION_ENCRYPTION_KEY=${CONVERSATION_ENCRYPTION_KEY:-your-secure-32-byte-encryption-key-here}
      - REDIS_HOST=wafl-redis
      - REDIS_PORT=6379
      - REDIS_DB=1
    depends_on:
      - wafl-redis
      - wafl-conversation-db
    networks:
      - wafl-network
    restart: unless-stopped
    command: ["python", "worker.py"]

volumes:
  postgresql_data:
  redis_data:
  conversation_db_data:  # 대화 전용 DB 볼륨
  milvus_etcd:
  milvus_minio:
  milvus_data:

networks:
  wafl-network:
    driver: bridge